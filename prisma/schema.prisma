generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  image         String?
  role          Role           @default(STAFF)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  announcements Announcement[]
  
  // Wiki system relations
  createdPages     Page[]         @relation("PageCreator")
  updatedPages     Page[]         @relation("PageUpdater")
  pageVersions     PageVersion[]  @relation("VersionCreator")
  attachments      Attachment[]   @relation("AttachmentUploader")
  pageViews        PageView[]     @relation("PageViewer")
  activityLogs     ActivityLog[]  @relation("ActivityActor")
  pagePermissions  PagePermission[] @relation("PermissionSubject")
  settingUpdates   WikiSetting[]    @relation("SettingUpdater")
}

enum Role {
  ADMIN
  STAFF
}

// New hierarchical link system
model LinkCategory {
  id            String            @id @default(cuid())
  name          String
  description   String?
  order         Int               @default(0)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  subCategories LinkSubCategory[]
  links         Link[]            // Links directly at category level
}

model LinkSubCategory {
  id               String               @id @default(cuid())
  name             String
  description      String?
  order            Int                  @default(0)
  categoryId       String
  category         LinkCategory         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  subSubCategories LinkSubSubCategory[]
  links            Link[]               // Links directly at subcategory level
}

model LinkSubSubCategory {
  id            String          @id @default(cuid())
  name          String
  description   String?
  order         Int             @default(0)
  subCategoryId String
  subCategory   LinkSubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  links         Link[]          // Links at sub-subcategory level
}

model Link {
  id               String               @id @default(cuid())
  title            String
  url              String
  description      String?
  order            Int                  @default(0)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  
  // Can belong to any level of the hierarchy
  categoryId       String?
  category         LinkCategory?        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  subCategoryId    String?
  subCategory      LinkSubCategory?     @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  
  subSubCategoryId String?
  subSubCategory   LinkSubSubCategory?  @relation(fields: [subSubCategoryId], references: [id], onDelete: Cascade)
  
  createdBy        String?
}

// Marsden Apps model
model MarsdenApp {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String   // Lucide React icon name
  url         String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Legacy models - keeping for backward compatibility
model Announcement {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
  pinned    Boolean  @default(false)
}

model QuickLink {
  id        String   @id @default(cuid())
  label     String
  url       String
  createdAt DateTime @default(now())
  createdBy String?
}

model Staff {
  id         String   @id @default(cuid())
  name       String
  title      String
  email      String   @unique
  phone      String?
  location   String?
  department String?
  image      String?
  createdAt  DateTime @default(now())
}

// Wiki Knowledge Base System Models

model Page {
  id               String      @id @default(cuid())
  title            String
  slug             String      @unique
  path             String      @unique // Full hierarchical path like /parent/child
  parentId         String?
  parent           Page?       @relation("PageHierarchy", fields: [parentId], references: [id])
  children         Page[]      @relation("PageHierarchy")
  status           PageStatus  @default(DRAFT)
  currentVersionId String?
  currentVersion   PageVersion? @relation("CurrentVersion", fields: [currentVersionId], references: [id])
  summary          String?
  viewCount        Int         @default(0)
  createdById      String
  createdBy        User        @relation("PageCreator", fields: [createdById], references: [id])
  updatedById      String
  updatedBy        User        @relation("PageUpdater", fields: [updatedById], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  // Relations
  versions         PageVersion[] @relation("PageVersions")
  tags             PageTag[]
  attachments      Attachment[]
  views            PageView[]
  permissions      PagePermission[]
  activityLogs     ActivityLog[]
  outgoingLinks    PageLink[]   @relation("FromPage")
  incomingLinks    PageLink[]   @relation("ToPage")
  
  @@index([slug])
  @@index([path])
  @@index([status])
  @@index([createdAt])
  @@index([viewCount])
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model PageVersion {
  id              String   @id @default(cuid())
  pageId          String
  page            Page     @relation("PageVersions", fields: [pageId], references: [id], onDelete: Cascade)
  title           String
  contentJSON     Json     // TipTap/ProseMirror content
  contentMarkdown String   // For diffs and search
  changeNote      String?
  isMinorEdit     Boolean  @default(false)
  createdById     String
  createdBy       User     @relation("VersionCreator", fields: [createdById], references: [id])
  createdAt       DateTime @default(now())
  
  // Relations
  attachments     Attachment[]
  activityLogs    ActivityLog[]
  currentVersionOf Page[]     @relation("CurrentVersion")
  
  @@index([pageId])
  @@index([createdAt])
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  color       String?   // Hex color for display
  createdAt   DateTime  @default(now())
  
  pages       PageTag[]
  
  @@index([name])
}

model PageTag {
  pageId String
  tagId  String
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([pageId, tagId])
}

model Attachment {
  id            String       @id @default(cuid())
  pageId        String
  page          Page         @relation(fields: [pageId], references: [id], onDelete: Cascade)
  versionId     String?
  version       PageVersion? @relation(fields: [versionId], references: [id], onDelete: Cascade)
  filename      String
  originalName  String
  blobKey       String       // Object storage key
  contentType   String
  size          Int
  checksum      String?
  extractedText String?      // For search indexing
  uploadedById  String
  uploadedBy    User         @relation("AttachmentUploader", fields: [uploadedById], references: [id])
  createdAt     DateTime     @default(now())
  
  @@index([pageId])
  @@index([versionId])
  @@index([createdAt])
}

model PageView {
  id        String   @id @default(cuid())
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId    String?  // Anonymous views have null userId
  user      User?    @relation("PageViewer", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  
  @@index([pageId])
  @@index([createdAt])
  @@index([userId])
}

model PagePermission {
  id        String   @id @default(cuid())
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId    String?  // For user-specific permissions
  user      User?    @relation("PermissionSubject", fields: [userId], references: [id])
  role      Role?    // For role-based permissions
  canRead   Boolean  @default(true)
  canWrite  Boolean  @default(false)
  canAdmin  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@unique([pageId, userId, role])
  @@index([pageId])
}

model ActivityLog {
  id        String          @id @default(cuid())
  pageId    String?
  page      Page?           @relation(fields: [pageId], references: [id], onDelete: SetNull)
  versionId String?
  version   PageVersion?    @relation(fields: [versionId], references: [id], onDelete: SetNull)
  actorId   String?
  actor     User?           @relation("ActivityActor", fields: [actorId], references: [id], onDelete: SetNull)
  type      ActivityType
  data      Json?           // Additional context data
  createdAt DateTime        @default(now())
  
  @@index([pageId])
  @@index([actorId])
  @@index([type])
  @@index([createdAt])
}

enum ActivityType {
  CREATE
  UPDATE
  RESTORE
  UPLOAD
  DELETE
  PUBLISH
  ARCHIVE
  TAG_ADD
  TAG_REMOVE
  PERMISSION_CHANGE
  USER_ROLE_CHANGE
  SETTINGS_UPDATE
}

model PageLink {
  id         String   @id @default(cuid())
  fromPageId String
  fromPage   Page     @relation("FromPage", fields: [fromPageId], references: [id], onDelete: Cascade)
  toPageId   String
  toPage     Page     @relation("ToPage", fields: [toPageId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  
  @@unique([fromPageId, toPageId])
  @@index([fromPageId])
  @@index([toPageId])
}

model WikiSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt
  updatedBy String
  user      User     @relation("SettingUpdater", fields: [updatedBy], references: [id])
  
  @@index([key])
}